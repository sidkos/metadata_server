name: 🧩 🔍 🐳 Unit Tests on Docker
run-name: "Command: ${{ inputs.tests_command }} Context: ${{ inputs.context }}"

on:
  workflow_call:
    inputs:
      compose_file_path:
        description: 'Path to the docker compose file'
        required: true
        type: string
        default: 'docker-compose.yml'
      tests_host_name:
        description: 'Name of the host to run the tests on'
        required: true
        type: string
      context:
        description: 'Context to run the tests in'
        required: false
        type: string
        default: './tests/unit'
      tests_command:
        description: 'Command to run the tests'
        required: false
        type: string
        default: 'pytest'

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        type: string
      compose_file_path:
        description: 'Path to the docker compose file'
        required: true
        type: string
        default: 'docker-compose.yml'
      tests_host_name:
        description: 'Name of the host to run the tests on'
        required: true
        type: string
      context:
        description: 'Context to run the tests in'
        required: false
        type: string
        default: './tests/unit'
      tests_command:
        description: 'Command to run the tests'
        required: false
        type: string
        default: "pytest"

permissions:
  id-token: write
  contents: write

jobs:
  unit-tests:
    name: "🧩 🔍 🐳 Unit Tests on Docker"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        shell: bash
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_DEBUG: ${{ vars.DJANGO_DEBUG }}
      DJANGO_ALLOWED_HOSTS: ${{ vars.DJANGO_ALLOWED_HOSTS }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}

    steps:
      - name: SetUp Python Project
        uses: sidkos/metadata_server/.github/actions/setup_python_project@main

      - name: Print runner environment variables
        run: env | sort

      - name: Print runner user and it's HOME
        run: |
          whoami
          echo $HOME

      - name: Print runner user home directory contents
        run: ls -lah $HOME

      - name: Docker Compose Build
        run: docker compose -f ${{inputs.compose_file_path}} build

      - name: Docker Compose Up
        run: docker compose -f ${{inputs.compose_file_path}} up -d

      - name: Set CONTAINER_ID env vars
        run: |
          CONTAINER_ID=$(docker ps -qf "name=${{inputs.tests_host_name}}")
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV

      - name: Print CONTAINER_ID
        run: echo "CONTAINER_ID is ${{ env.CONTAINER_ID }}"

      - name: Print Docker User
        run: docker exec ${{env.CONTAINER_ID}} whoami

      - name: Print Docker User Home Directory contents
        run: docker exec ${{env.CONTAINER_ID}} ls -lah /

      - name: Run Unit Tests
        run: "python -m ${{ inputs.tests_command }} ${{ inputs.context }}"
