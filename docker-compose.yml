services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  metadata_manager:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      TEST_USERNAME: ${TEST_USERNAME}
      TEST_PASSWORD: ${TEST_PASSWORD}
    command: >-
      bash -lc 'python src/manage.py migrate && if [ -n "$TEST_USERNAME" ] && [ -n "$TEST_PASSWORD" ]; then python src/manage.py shell -c "from django.contrib.auth import get_user_model; import os; U=get_user_model(); u=os.environ.get(\"TEST_USERNAME\"); p=os.environ.get(\"TEST_PASSWORD\"); user, created = U.objects.get_or_create(username=u, defaults={\"is_staff\": True, \"is_superuser\": True}); user.set_password(p); user.save(); print(\"Test user ensured:\", user.username)"; else echo "TEST_USERNAME/TEST_PASSWORD not set; skipping test user creation"; fi && python src/manage.py runserver 0.0.0.0:8000'
    volumes:
      - ./src:/app/src
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata:
